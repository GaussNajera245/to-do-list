{"version":3,"sources":["components/Todos.js","components/ListTile.jsx","components/CardHeader.jsx","components/Minbox.jsx","components/BoxClass.jsx","components/Header.jsx","components/BoxFunction.jsx","App.js","index.js"],"names":["todos","title","items","useStyles","makeStyles","margin","ListTile","props","classes","React","useState","check","setCheck","normalTile","className","ListItem","button","IconButton","aria-label","onClick","getName","style","fill","Divider","light","checkboxTile","textDecoration","ListItemIcon","Checkbox","edge","isCheckboxTile","input","backgroundColor","borderBottom","marginLeft","border","fontSize","color","CardHeader","id","type","onChange","change","value","inputVal","click","MinBox","Grid","minWidth","justify","container","spacing","width","children","BoxClass","getItemsFromList","itemName","query","find","e","setState","head","K","Math","random","tiles","map","i","key","addingListTiles","bind","addingChores","updateToDoInput","updateListInput","state","inputList","inputDo","val","this","newValue","newVal","target","chores","element","item","sm","xs","Paper","paper","List","Hidden","xsDown","Component","withStyles","padding","textAlign","maxHeight","overflow","theme","createMuiTheme","typography","fontFamily","Header","ThemeProvider","Typography","BoxFunction","prev","toString","condition","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1dda44f.chunk.js","sourcesContent":["const todos = [\r\n    {title: \"Grocery List\", items: [\"Buy Chicken\", \"Zuchinis\", \"Coliander\", \"Coffee\", \"Oil\",\"Toilet paper\"]},\r\n    {title: \"Homework\", items: [\"Do math\",\"Study English\", \"Start DMP project\",\"Go to the Museum\", \"Checkout Git\"]},\r\n];\r\n\r\nexport default todos;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Divider, Checkbox,ListItem,ListItemIcon} from '@material-ui/core';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    margin: {\r\n        margin: 1,\r\n    },\r\n});\r\n\r\n\r\nfunction ListTile(props){\r\n    \r\n    const classes = useStyles();\r\n\r\n    // let check= false;\r\n    const [check, setCheck] = React.useState(false);\r\n\r\n    const normalTile =(\r\n        <div className=\"listTile\">\r\n                <ListItem button>\r\n                    {props.title}\r\n                <IconButton aria-label=\"deploy\" className={classes.margin} onClick={()=> props.getName(props.title)}>\r\n                    <ChevronRightIcon style={{fill: \"#61dafb\"}}/>\r\n                </IconButton> \r\n                </ListItem>\r\n                <Divider light />\r\n        </div>\r\n    );\r\n    \r\n    const checkboxTile =(\r\n        <div className=\"optionTile\" style={check ? {textDecoration: \"line-through\"}: {textDecoration: \"none\"}} >\r\n            <ListItem >\r\n                <ListItemIcon>\r\n                    <Checkbox edge=\"start\" onClick={()=>{ setCheck(!check)}} />\r\n                </ListItemIcon>\r\n                    {props.title}\r\n            </ListItem>\r\n        </div>\r\n    );\r\n\r\n    return props.isCheckboxTile ? (checkboxTile) : (normalTile);\r\n\r\n}\r\n\r\nexport default ListTile;","import React from 'react';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Divider, ListItem, IconButton } from '@material-ui/core';\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    input: {\r\n        backgroundColor: 'transparent',\r\n        // //padding: 0.7rem;\r\n        // width:'200px',\r\n        borderBottom: 'solid 2px #ebebeb',\r\n        marginLeft: '12px',\r\n        border: 'solid 3px transparent',\r\n        fontSize: '1rem',\r\n        color: 'hsla(260, 2%, 25%, 0.7)',\r\n    }\r\n});\r\n\r\n\r\nfunction CardHeader(props){\r\n\r\n    const classes = useStyles();\r\n    return(\r\n        <div id=\"cardheader\">\r\n            <ListItem>\r\n                {props.title} \r\n                <input type='text' id={props.title} className={classes.input} onChange={props.change} value={props.inputVal}></input>\r\n                <IconButton aria-label=\"add\" onClick={props.click} >\r\n                    <AddCircleOutlineIcon style={{ fill: \"#61dafb\" }} />\r\n                </IconButton>\r\n            </ListItem>\r\n            <Divider light /> \r\n            <Divider light />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardHeader","import React from 'react';\r\nimport {Grid} from '@material-ui/core';\r\n\r\nfunction MinBox(props){\r\n    return(\r\n        <Grid style={{ minWidth: \"400px\" }}>\r\n            <Grid justify=\"center\" container spacing={3} style={{ width:\"100%\" }} >\r\n                {props.children}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default MinBox;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Grid, Paper, List, Hidden, } from '@material-ui/core';\r\nimport todos from './Todos'\r\nimport ListTile from './ListTile';\r\nimport CardHeader from './CardHeader';\r\nimport MinBox from './Minbox'\r\n\r\nconst useStyles = () => ({\r\n    paper: {\r\n        padding: '5px',\r\n        textAlign: 'center',\r\n        color: \"#FF8FFF\",\r\n        maxHeight: \"69vh\",\r\n        overflow: 'auto'\r\n    },\r\n    margin: {\r\n        margin: 1,\r\n    },\r\n\r\n});\r\n\r\nclass BoxClass extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let tiles = todos.map(\r\n            i => <ListTile title={i.title} key={i.title} id={i.title} getName={this.getItemsFromList} />\r\n        );\r\n        this.addingListTiles = this.addingListTiles.bind(this);\r\n        this.addingChores = this.addingChores.bind(this);\r\n        this.updateToDoInput = this.updateToDoInput.bind(this);\r\n        this.updateListInput = this.updateListInput.bind(this);\r\n        this.state = {\r\n            tiles: tiles,\r\n            items: [],\r\n            inputList: \"\",\r\n            inputDo: \"\",\r\n            head:\"\"\r\n        };\r\n    }\r\n    \r\n\r\n    addingListTiles() {\r\n        const val= this.state.inputList;\r\n        const newValue = <ListTile title={val} key={this.K} getName={(i)=>{this.setState({head:i,items:[]})}}/>\r\n        const condition = val !== \"\" ;\r\n        \r\n        {condition && \r\n            this.setState({\r\n                tiles: [...this.state.tiles, newValue],\r\n                inputList: \"\",\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    addingChores() {\r\n        const newVal = this.state.inputDo;\r\n        const condition = newVal !== \"\" ;\r\n        \r\n        if(condition) {   \r\n            this.setState({\r\n                items: [...this.state.items, newVal],\r\n                inputDo: \"\",\r\n            });\r\n        }\r\n    };\r\n\r\n    getItemsFromList = (itemName) => {\r\n        let query = todos.find(e => e.title === itemName);\r\n        this.setState({\r\n            items: query.items,\r\n            head: itemName,\r\n        });\r\n    };\r\n\r\n    updateToDoInput(e){\r\n        const val = e.target.value;\r\n            this.setState({\r\n                inputDo: val\r\n            })\r\n    }\r\n\r\n    updateListInput(e){\r\n        const val = e.target.value;\r\n            this.setState({\r\n                inputList: val\r\n            })\r\n    }\r\n\r\n    K= ()=> Math.random() ;\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        let chores = (\r\n            (this.state.items !== 0) &&\r\n            this.state.items.map(\r\n                element => <ListTile title={element} key={this.K} isCheckboxTile='true' />\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <MinBox>\r\n                    <Grid item={true} sm={4} xs={10}>\r\n                        <Paper className={classes.paper}  >\r\n                            <List>\r\n                                <CardHeader  title=\"List:\" inputVal={this.state.inputList} click={this.addingListTiles} change={this.updateListInput}/>\r\n                                {this.state.tiles}\r\n                            </List>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                <Hidden xsDown>\r\n                    <Grid item={true} sm={6} xs={10}>\r\n                        <Paper className={classes.paper} >\r\n                            <List>\r\n                                <CardHeader  title=\"To do:\" inputVal={this.state.inputDo} click={this.addingChores} change={this.updateToDoInput}/>\r\n                                {this.state.head}\r\n                                {chores}\r\n                            </List>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Hidden>\r\n                </MinBox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(BoxClass);\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n      fontSize: 50, \r\n      fontFamily: 'Noto Serif',\r\n  },\r\n});\r\n\r\nfunction Header(props){\r\n    return (\r\n        <div className=\"header\" style={{minWidth:'400px'}} >\r\n            <ThemeProvider theme={theme}>\r\n            <Typography>{props.title}</Typography>\r\n            </ThemeProvider>\r\n            <Divider light />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Paper, List, Hidden, } from '@material-ui/core';\r\nimport todos from './Todos'\r\nimport ListTile from './ListTile';\r\nimport CardHeader from './CardHeader';\r\nimport MinBox from './Minbox'\r\n\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        padding: '5px',\r\n        textAlign: 'center',\r\n        color: \"#f262f2\",\r\n        maxHeight: \"69vh\",\r\n        overflow: 'auto'\r\n    },\r\n    margin: {\r\n        margin: 1,\r\n    },\r\n});\r\n\r\nfunction BoxFunction(){\r\n    let tiles = todos.map(\r\n        i => <ListTile title={i.title} key={i.title} id={i.title} getName={getItemsFromList} />\r\n    );\r\n    \r\n    const [state, setState] = React.useState({\r\n        tiles: tiles,\r\n        items: [],\r\n        inputList: \"\",\r\n        inputDo: \"\",\r\n        head:\"\"\r\n    });\r\n    \r\n    function addingListTiles() {\r\n        const val= state.inputList;\r\n        const condition = val !== \"\" ;\r\n        const get = (i)=>{\r\n            setState( prev => {\r\n                return {\r\n                    ...prev,\r\n                    head:i,\r\n                    items:[]\r\n                }})}\r\n                \r\n        const newValue = <ListTile title={val} key={Math.random().toString()} getName={get}/>\r\n        if(condition) {\r\n            setState(\r\n                prev => {\r\n                    return { \r\n                        ...prev,\r\n                        tiles: [...state.tiles, newValue],\r\n                        inputList: \"\",\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    function addingChores() {\r\n        const newVal = state.inputDo;\r\n        const condition = newVal !== \"\" ;\r\n        \r\n        {condition &&   \r\n            setState(\r\n                prev => {\r\n                    return { \r\n                        ...prev,\r\n                        items: [...state.items, newVal],\r\n                        inputDo: \"\",\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    function getItemsFromList(itemName) {\r\n        let query = todos.find(e => e.title === itemName);\r\n        setState(\r\n            prev => {\r\n                return {\r\n                ...prev,\r\n                items: query.items,\r\n                head: itemName,\r\n            }\r\n        });\r\n    };\r\n\r\n    function updateToDoInput(e){\r\n        const val = e.target.value;\r\n            setState(\r\n                prev => {\r\n                    return {\r\n                    ...prev,\r\n                    inputDo: val\r\n                }\r\n            });\r\n    }\r\n\r\n    function updateListInput(e){\r\n        const val = e.target.value;\r\n        setState(\r\n            prev => {\r\n                return {\r\n                ...prev,\r\n                inputList: val\r\n            }\r\n        });\r\n    }\r\n\r\n    let chores = (\r\n        (state.items !== 0) &&\r\n        state.items.map(\r\n            (element) => <ListTile title={element} key={element+Math.random().toString()} isCheckboxTile='true' />\r\n        )\r\n    );\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <MinBox>\r\n                <Grid item={true} sm={4} xs={10}>\r\n                    <Paper className={classes.paper}  >\r\n                        <List>\r\n                            <CardHeader  title=\"List:\" inputVal={state.inputList} click={addingListTiles} change={updateListInput}/>\r\n                            {state.tiles}\r\n                        </List>\r\n                    </Paper>\r\n                </Grid>\r\n\r\n            <Hidden xsDown>\r\n                <Grid item={true} sm={6} xs={10}>\r\n                    <Paper className={classes.paper} >\r\n                        <List>\r\n                            <CardHeader  title=\"To do:\" inputVal={state.inputDo} click={addingChores} change={updateToDoInput}/>\r\n                            {state.head}\r\n                            {chores}\r\n                        </List>\r\n                    </Paper>\r\n                </Grid>\r\n            </Hidden>\r\n            </MinBox>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default (BoxFunction);\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport BoxClass from './components/BoxClass';\r\nimport './App.css';\r\nimport Header from './components/Header'\r\nimport BoxFunction from \"./components/BoxFunction\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header title='Tasks to do:' />\r\n        <br></br>\r\n      <BoxFunction />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// // If you want your app to work offline and load faster, you can change\r\n// // unregister() to register() below. Note this comes with some pitfalls.\r\n// // Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}